{"version":3,"sources":["components/TodoListTemplate.js","actions/index.js","components/Form.js","components/TodoItem.js","components/TodoItemList.js","App.js","serviceWorker.js","reducers/index.js","index.js"],"names":["TodoListTemplate","form","children","className","process","api_url","Form","state","todo","handleChange","e","setState","target","value","handleCreate","props","addTodo","text","checked","handleKeyPress","key","this","onChange","onKeyPress","onClick","Component","connect","dispatch","axios","post","then","res","type","payload","data","catch","error","console","log","TodoItem","handleRemove","id","removeTodo","handleToggle","toggleTodo","nextProps","nextState","todoText","stopPropagation","delete","put","TodoItemList","fetchAllTodos","todos","todoList","map","get","App","Boolean","window","location","hostname","match","initialState","store","createStore","action","Object","assign","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.654b7d8c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TodoListTemplate.css';\r\nconst TodoListTemplate = ({ form, children }) => {\r\n    return (\r\n        <main className=\"todo-list-template\">\r\n            <div className=\"title\">\r\n                오늘 할 일 ({process.env.REACT_APP_TITLE})\r\n            </div>\r\n            <section className=\"form-wrapper\">\r\n                {form}\r\n            </section>\r\n            <section className=\"todos-wrapper\">\r\n                {children}\r\n            </section>\r\n        </main>\r\n    );\r\n};\r\nexport default TodoListTemplate;","import axios from 'axios';\r\n\r\n//Action type 정의\r\nexport const FETCH_TODOS = \"FETCH_TODOS\";\r\nexport const ADD_TODO = \"ADD_TODO\";\r\nexport const REMOVE_TODO = \"REMOVE_TODO\";\r\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\r\n\r\n//Server URL\r\nconst api_url = process.env.REACT_APP_APIURL;\r\n\r\n//Action 생성함수 선언\r\n\r\n//1. Todo 목록\r\nexport const fetchAllTodos = () => {\r\n    return (dispatch) => {\r\n        axios.get(api_url) //서버 요청\r\n            .then(res => {\r\n                dispatch({\r\n                    // 요청이 성공하면, 서버 응답내용을 payload로 설정하여\r\n                    // FETCH_TODOS 액션을 디스패치 합니다.\r\n                    type: FETCH_TODOS,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n                throw (error);\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n//2. Todo 등록\r\nexport const addTodo = (todo) => {\r\n    return (dispatch) => {\r\n        axios.post(api_url, todo)\r\n            .then(res => {\r\n                dispatch({\r\n                    type: ADD_TODO,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                throw (error);\r\n            })\r\n    }\r\n}\r\n\r\n\r\n//3. Todo 삭제\r\nexport const removeTodo = (id) => {\r\n    return (dispatch) => {\r\n        axios.delete(`${api_url}/${id}`)\r\n            .then(res => {\r\n                dispatch({\r\n                    type: REMOVE_TODO,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                throw (error);\r\n            })\r\n    }\r\n}\r\n\r\n//4. toggle\r\nexport const toggleTodo = (todo) => {\r\n    return (dispatch) => {\r\n        axios.put(`${api_url}/${todo.id}`, todo)\r\n            .then(res => {\r\n                dispatch({\r\n                    type: TOGGLE_TODO,\r\n                    payload: res.data\r\n                })\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                throw (error);\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport './Form.css';\r\nimport { connect } from 'react-redux';\r\nimport { addTodo } from '../actions';\r\n\r\nclass Form extends Component {\r\n    state = {\r\n        todo: ''\r\n    };\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            todo: e.target.value\r\n        });\r\n    };\r\n\r\n    handleCreate = () => {\r\n        const { todo } = this.state;\r\n        //Action 생성함수 호출\r\n        this.props.addTodo({\r\n            text: todo,\r\n            checked: false\r\n        });\r\n\r\n        this.setState({\r\n            todo: ''\r\n        });\r\n    };\r\n\r\n    handleKeyPress = (e) => {\r\n        if (e.key === 'Enter') {\r\n            this.handleCreate();\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { todo } = this.state;\r\n        const { handleChange, handleCreate, handleKeyPress } = this;\r\n        return (\r\n            <div className=\"form\">\r\n                <input value={todo} onChange={handleChange} onKeyPress={handleKeyPress} />\r\n                <div className=\"create-button\" onClick={handleCreate}>\r\n                    추가\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, { addTodo })(Form);\r\n","import React, { Component } from 'react';\r\nimport './TodoItem.css';\r\nimport { connect } from 'react-redux';\r\nimport { removeTodo, toggleTodo } from '../actions';\r\n\r\n\r\nclass TodoItem extends Component {\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return this.props.checked !== nextProps.checked;\r\n    }\r\n\r\n    handleRemove = (id) => {\r\n        this.props.removeTodo(id);\r\n    }\r\n\r\n    handleToggle = (todo) => {\r\n        this.props.toggleTodo(todo);\r\n    }\r\n\r\n\r\n    render() {\r\n        const { todoText, checked, id } = this.props;\r\n        return (\r\n            <div className=\"todo-item\" onClick={() => {\r\n                const todo = { id, text:todoText, checked };\r\n                todo.checked = !todo.checked;\r\n                this.handleToggle(todo);\r\n            }}>\r\n                <div className=\"remove\" onClick={(e) => {\r\n                    // event가 전파되는 것을 방지 되도록\r\n                    e.stopPropagation();\r\n                    this.handleRemove(id);\r\n                }}>\r\n                    &times;\r\n                </div>\r\n                {/* <div className={`todo-text`}> */}\r\n                <div className={`todo-text ${checked && 'checked'}`}>\r\n\r\n                    {/* checked가 true인 경우 아래와 같이 실행 */}\r\n                    {/* <div className={`todo-text && 'checked'}`}> */}\r\n                    <div>\r\n                        {todoText}\r\n                    </div>\r\n                </div>\r\n                {\r\n                    checked && (<div className=\"check-mark\">✓</div>)\r\n                }\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, { removeTodo, toggleTodo })(TodoItem);","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport { connect } from 'react-redux';\r\nimport { fetchAllTodos } from '../actions';\r\n\r\nclass TodoItemList extends Component {\r\n\r\n\r\n    componentDidMount() {\r\n        this.props.fetchAllTodos();\r\n    }\r\n\r\n\r\n    //life-cycle 메서드 overriding : render() 메서드의 호출을 줄일 수 있다.\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return this.props.todos !== nextProps.todos;\r\n    }\r\n\r\n    render() {\r\n        const { todos } = this.props;\r\n        const todoList = todos.map(({ id, text, checked }) => (\r\n            <TodoItem id={id} checked={checked} todoText={text} key={id} />\r\n        ));\r\n        return (\r\n            <div>\r\n                {/* <TodoItem todoText=\"할 일1\" checked={true}/>\r\n                <TodoItem todoText=\"할 일2\" checked={true}/>\r\n                <TodoItem todoText=\"할 일3\" checked={false}/> */}\r\n                {todoList}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        todos: state.todos\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, { fetchAllTodos })(TodoItemList);\r\n","import React, { Component } from 'react';\nimport TodoListTemplate from './components/TodoListTemplate';\nimport Form from './components/Form';\nimport TodoItemList from './components/TodoItemList';\n\n\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div>\n        <TodoListTemplate form={<Form />}>\n          <TodoItemList />\n        </TodoListTemplate>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { FETCH_TODOS, ADD_TODO, REMOVE_TODO, TOGGLE_TODO } from '../actions';\r\n\r\nconst initialState = {\r\n    todos: [\r\n        {\r\n            id: 0,\r\n            text: '',\r\n            checked: false,\r\n        }\r\n    ]\r\n}\r\n\r\n//Reducer 함수\r\nexport const todoReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FETCH_TODOS:\r\n        //return Object.assign({}, state, { todos: action.payload });\r\n        case ADD_TODO:\r\n        //return Object.assign({}, state, { todos: action.payload });\r\n        case REMOVE_TODO:\r\n        //return Object.assign({}, state, { todos: action.payload });\r\n        case TOGGLE_TODO:\r\n            return Object.assign({}, state, { todos: action.payload });\r\n\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n\nimport { todoReducer } from './reducers';\nconst store = createStore(todoReducer, composeWithDevTools(applyMiddleware(thunk)));\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}