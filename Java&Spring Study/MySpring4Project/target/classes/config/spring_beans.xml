<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<!-- @Aspect 지원 -->
	<aop:aspectj-autoproxy />

	<!-- AOP 설정 -->
	<bean id="ptAdvice" class="myspring.aop.xml.PerformanceTraceAdvice"/>
	<aop:config>
		<aop:aspect ref="ptAdvice">
			<aop:around method="trace" pointcut="execution(public * myspring.user..*(..))"/>
<!-- 			<aop:around method="trace" pointcut="execution(public void myspring.user..*())"/> -->
<!-- 			<aop:around method="trace" pointcut="execution(public * myspring.user..*User(..))"/> -->
<!-- 			<aop:around method="trace" pointcut="execution(public * myspring.user..read*(..))"/> -->
<!-- 			<aop:around method="trace" pointcut="execution(public * myspring.user.service..*(..))"/> -->
<!-- 			<aop:around method="trace" pointcut="execution(public * myspring.user.dao..*(..))"/> -->			
<!-- 			<aop:around method="trace" pointcut="execution(public void myspring.user..*(..))"/> -->
<!-- 			<aop:around method="trace" pointcut="execution(private * myspring.user..*(..))"/> -->
		</aop:aspect>
	</aop:config>

	<!-- UserMapper 설정 -->
	<!-- MapperScannerConfigurer 설정 -->
	<!-- myspring.user.dao.mapper package 아래에 @MyMapper라는 어노테이션을 선언한 Mapper 인터페이스를
		모두 찾으세요라는 의미이다. -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="myspring.user.dao.mapper" />
		<property name="annotationClass" value="myspring.user.dao.mapper.MyMapper" />
	</bean>


	<!-- Mapper 설정 -->
	<!-- 다음과 같이 설정하면, Mapper 인터페이스가 추가될 때마다 계속 Mapper 인터페이스 이름을 설정해 주어야한다.(단점) -->
	<!-- <bean id="userMapper" -->
	<!-- class="org.mybatis.spring.mapper.MapperFactoryBean"> -->
	<!-- <property name="mapperInterface" value="myspring.user.dao.mapper.UserMapper" 
		/> -->
	<!-- <property name="sqlSessionTemplate" ref="sqlSession" /> -->
	<!-- </bean> -->




	<!-- SqlSessionTemplate 클래스를 Bean으로 등록 -->
	<bean id="sqlSession"
		class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>


	<!-- SqlSessionFactoryBean 클래스를 Bean으로 등록 -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation"
			value="classpath:config/SqlMapConfig.xml" />
		<property name="mapperLocations">
			<list>
				<!-- *Mapper.xml을 사용하면 StudentMapper.xml, UserMapper.xml을 처리가능하다. -->
				<value>classpath:config/*Mapper.xml</value>
			</list>
		</property>
	</bean>
	
	<context:property-placeholder location="classpath:config/values.properties"/>

	<!-- Datasource 구현체인 BasicDataSource 클래스를 Bean으로 등록 -->
	<bean id="dataSource"
		class="org.apache.commons.dbcp2.BasicDataSource">
		<property name="driverClassName" value="${db.driverClass}" />
		<property name="url" value="${db.url}" />
		<property name="username" value="${db.username}" />
		<property name="password" value="${db.password}" />
	</bean>

	<!-- <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" -->
	<!-- p:driverClassName="${db.driverClass}" -->
	<!-- p:url="${db.url}" -->
	<!-- p:username="${db.username}" -->
	<!-- p:password="${db.password}" -->
	<!-- /> -->


	
	<!-- 상위 인터페이스로 설정 -->
	<!-- Component Auto Scanning 설정 -->
	<context:component-scan base-package="myspring.user,myspring.aop">
		<!-- @Controller 어노테이션을 선언한 컴포넌트는 제외하겠다. -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>



	<!-- StringPrinter 클래스를 Bean으로 설정 -->
	<bean id="sPrinter" class="myspring.di.xml.StringPrinter" />
	<!-- ConsolePrinter 클래스를 Bean으로 설정 -->
	<bean id="cPrinter" class="myspring.di.xml.ConsolePrinter" />

	<!-- Hello 클래스를 Bean으로 설정 -->
	<!-- scope : singleton, prototype, request, session -->
	<bean id="hello" class="myspring.di.xml.Hello" scope="singleton">
		<!-- setter injection : default constructor를 사용해서 객체를 생성함 -->
		<property name="name" value="Spring" /> <!-- String -->
		<property name="printer" ref="sPrinter" /> <!-- Printer -->
	</bean>

	<bean id="helloC" class="myspring.di.xml.Hello">
		<!-- consturctor injection : 아규먼트가 있는 (중복정의된) constructor 를 사용해서 객체를 생성 -->
		<constructor-arg index="0" value="Constructor" />
		<constructor-arg index="1" ref="cPrinter" /> <!-- Hello가 ConsolePrinter를 참조하게 됨 -->
		<property name="names">  <!-- setNames(List<String>) -->
			<list>
				<value>Java</value>
				<value>Kotlin</value>
				<value>Scalar</value>
				<value>Java</value>
			</list>
		</property>
		<property name="ages"> <!-- setAges(Map<String,Integer>) -->
			<map>
				<entry key="java" value="10" />
				<entry key="js" value="20" />
				<entry key="react" value="30" />
			</map>
		</property>
	</bean>
</beans>
